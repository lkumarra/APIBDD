// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BestBuy.API.BDD.Features.Products
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PostProducts")]
    [NUnit.Framework.CategoryAttribute("Products")]
    [NUnit.Framework.CategoryAttribute("PostProducts")]
    public partial class PostProductsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Products",
                "PostProducts"};
        
#line 1 "PostProduct.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Products", "PostProducts", "\tIn Order to post products\r\n\tI want to told to verify products\r\n\tAPI :- POST /pro" +
                    "ducts", ProgrammingLanguage.CSharp, new string[] {
                        "Products",
                        "PostProducts"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post a products")]
        [NUnit.Framework.CategoryAttribute("GetProducts")]
        [NUnit.Framework.CategoryAttribute("PositiveScenatio")]
        public virtual void PostAProducts()
        {
            string[] tagsOfScenario = new string[] {
                    "GetProducts",
                    "PositiveScenatio"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a products", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("I am a valid user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When(@"I create a product with name as 'Added Product', type as 'Added Type', price as '10000', shipping as '200', upc as 'AddedUPC',description as 'Added Description',manufacturer as 'Added Manufacturer', model as 'Added Model',url as 'Added Url' image as 'Added Image'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("Products should be created with status code \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.And("Verify product created in Db.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Post a products with inavalid data")]
        [NUnit.Framework.CategoryAttribute("GetProducts")]
        [NUnit.Framework.CategoryAttribute("NegativeScenario")]
        [NUnit.Framework.TestCaseAttribute("Try to create product with name as null", "NULL", "AddedType1", "1", "1", "AddedUpc1", "AddedDescription", "AddedManufacturer", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'name\' should be string", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with name as empty", "EMPTY", "AddedType2", "2", "2", "AddedUpc1", "AddedDescription", "AddedManufacturer", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'name\' should NOT be shorter than 1 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with type as null", "AddedName3", "NULL", "4", "4", "AddedUpc1", "AddedDescription", "AddedManufacturer", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'type\' should be string", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with type as empty", "AddedName4", "EMPTY", "5", "5", "AddedUpc1", "AddedDescription", "AddedManufacturer", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'type\' should NOT be shorter than 1 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with upc as null", "AddedName12", "AddedType12", "13", "13", "NULL", "AddedDescription", "AddedManufacturer", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'upc\' should be string", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with upc as empty", "AddedName13", "AddedType13", "14", "14", "EMPTY", "AddedDescription", "AddedManufacturer", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'upc\' should NOT be shorter than 1 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with description as null", "AddedName15", "AddedType15", "16", "16", "AddedUpc1", "NULL", "AddedManufacturer", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'description\' should be string", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with description as empty", "AddedName16", "AddedType16", "17", "17", "AddedUpc1", "EMPTY", "AddedManufacturer", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'description\' should NOT be shorter than 1 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with manufacturer as null", "AddedName18", "AddedType18", "19", "19", "AddedUpc1", "AddedDescription", "NULL", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'manufacturer\' should be string", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with manufacturer as empty", "AddedName19", "AddedType19", "20", "20", "AddedUpc1", "AddedDescription", "EMPTY", "AddedModel", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'manufacturer\' should NOT be shorter than 1 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with model as null", "AddedName21", "AddedType21", "22", "22", "AddedUpc1", "AddedDescription", "AddedManufacturer", "NULL", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'model\' should be string", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with model as empty", "AddedName22", "AddedType22", "23", "23", "AddedUpc1", "AddedDescription", "AddedManufacturer", "EMPTY", "AddedUrl", "AddedImage", "BadRequest", "Invalid Parameters", "\'model\' should NOT be shorter than 1 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with url as null", "AddedName24", "AddedType24", "25", "25", "AddedUpc1", "AddedDescription", "AddedManufacturer", "AddedModel", "NULL", "AddedImage", "BadRequest", "Invalid Parameters", "\'url\' should be string", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with url as empty", "AddedName25", "AddedType25", "26", "26", "AddedUpc1", "AddedDescription", "AddedManufacturer", "AddedModel", "EMPTY", "AddedImage", "BadRequest", "Invalid Parameters", "\'url\' should NOT be shorter than 1 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with image as null", "AddedName27", "AddedType27", "28", "28", "AddedUpc1", "AddedDescription", "AddedManufacturer", "AddedModel", "AddedUrl", "NULL", "BadRequest", "Invalid Parameters", "\'image\' should be string", null)]
        [NUnit.Framework.TestCaseAttribute("Try to create product with image as empty", "AddedName28", "AddedType28", "29", "29", "AddedUpc1", "AddedDescription", "AddedManufacturer", "AddedModel", "AddedUrl", "EMPTY", "BadRequest", "Invalid Parameters", "\'image\' should NOT be shorter than 1 characters", null)]
        public virtual void PostAProductsWithInavalidData(string scenario, string name, string type, string price, string shipping, string upc, string description, string manufacturer, string model, string url, string image, string errorName, string message, string errors, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GetProducts",
                    "NegativeScenario"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Scenario", scenario);
            argumentsOfScenario.Add("Name", name);
            argumentsOfScenario.Add("type", type);
            argumentsOfScenario.Add("price", price);
            argumentsOfScenario.Add("shipping", shipping);
            argumentsOfScenario.Add("upc", upc);
            argumentsOfScenario.Add("description", description);
            argumentsOfScenario.Add("manufacturer", manufacturer);
            argumentsOfScenario.Add("model", model);
            argumentsOfScenario.Add("url", url);
            argumentsOfScenario.Add("image", image);
            argumentsOfScenario.Add("errorName", errorName);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("errors", errors);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a products with inavalid data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
 testRunner.Given("I am a valid user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.When(string.Format("I try create a product with name as \'{0}\', type as \'{1}\', price as \'{2}\', shippin" +
                            "g as \'{3}\', upc as \'{4}\',description as \'{5}\',manufacturer as \'{6}\', model as \'{" +
                            "7}\', url as \'{8}\' image as \'{9}\'", name, type, price, shipping, upc, description, manufacturer, model, url, image), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.Then(string.Format("Products should not be created with name as \'{0}\',message as \'{1}\', status code \'" +
                            "400\' and errors as \'{2}\'", errorName, message, errors), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
